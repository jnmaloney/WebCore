#include "RenderSystem.h"
#include "shaders.h"
#include "Mesh.h"
#include <iostream>


RenderSystem::RenderSystem()
{
}


void RenderSystem::init(WindowManager& window)
{
  // Assign vars
  m_window = window;

  // GL Setup
  glEnable(GL_DEPTH_TEST);
  glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
  glEnable( GL_BLEND );
<<<<<<< HEAD
=======

  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
>>>>>>> f8c054953a6d727eb79ecf07e1c23d96c78a9719

  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);

   // Shaders

	const char vertexShaderSource[] =
		"attribute vec4 vPosition;		                     \n"
<<<<<<< HEAD
=======
//    "attribute vec3 vNormal;		                     \n"
>>>>>>> f8c054953a6d727eb79ecf07e1c23d96c78a9719
    "attribute vec2 vUV; \n"
    "uniform mat4 ModelLocal; \n"
    "uniform mat4 ViewProj; \n"
    "varying vec2 uv;                                 \n"
		"void main()                                         \n"
		"{                                                   \n"
<<<<<<< HEAD
    "   gl_Position = ViewProj * (ModelLocal * vPosition);                         \n"
//		"   gl_Position = (ModelLocal * vPosition);                         \n"
=======
		"   gl_Position = ViewProj * (ModelLocal * vPosition);                         \n"
>>>>>>> f8c054953a6d727eb79ecf07e1c23d96c78a9719
    "   uv.x = vUV.x; \n"
    "   uv.y = vUV.y; \n"
		"}                                                   \n";

<<<<<<< HEAD
  const char fragmentShaderSource[] =
		"precision mediump float;                     \n"
    "uniform sampler2D BaseMap;									\n"
    "varying vec2 uv;                                 \n"
		"void main()                                  \n"
		"{                                            \n"
    "  gl_FragColor = texture2D(BaseMap, uv); \n"
//    "  gl_FragColor = vec4(uv.x, uv.y, 1.0, 1.0); \n"
		"}                      \n";

=======
	// const char fragmentShaderSource[] =
	// 	"precision mediump float;                     \n"
  //   "uniform sampler2D BaseMap;									\n"
  //   "uniform float alpha;									\n"
	// 	"varying vec3 color;                          \n"   // From VS
  //   "varying vec2 uv;                                 \n"
	// 	"void main()                                  \n"
	// 	"{                                            \n"
  //   "  vec3 shade = texture2D(BaseMap, uv).rgb; \n"
  //   "  gl_FragColor = vec4(color * shade, 1.0);"
	// 	"}                                            \n";
  const char fragmentShaderSource[] =
		"precision mediump float;                     \n"
//    "uniform sampler2D BaseMap;									\n"
    "varying vec2 uv;                                 \n"
		"void main()                                  \n"
		"{                                            \n"
    "  gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0); \n"
//    "  gl_FragColor = texture2D(BaseMap, uv); \n"
		"}                      \n";


    const char vertexShaderSource2[] =
      "attribute vec4 vPosition;		                     \n"
      "uniform mat4 ModelLocal; \n"
      "uniform mat4 ViewProj; \n"
      "uniform vec3 diffuse;  \n"
      "varying vec3 color;                                 \n" // To FS
      "void main()                                         \n"
      "{                                                   \n"
      "   gl_Position = ViewProj * (ModelLocal * vPosition);                         \n"
      "   color = diffuse;             \n"
      "}                                                   \n";

    const char fragmentShaderSource2[] =
      "precision mediump float;                     \n"
      "uniform float alpha;									\n"
      "varying vec3 color;                          \n"   // From VS
      "void main()                                  \n"
      "{                                            \n"
      "  gl_FragColor = vec4(color, 1.0);"
      "}                                            \n";
>>>>>>> f8c054953a6d727eb79ecf07e1c23d96c78a9719

	//load vertex and fragment shaders
	GLuint vertexShader = loadShader(GL_VERTEX_SHADER, vertexShaderSource);
	GLuint fragmentShader = loadShader(GL_FRAGMENT_SHADER, fragmentShaderSource);
	programObject = buildProgram(vertexShader, fragmentShader, "vPosition", "vUV");
<<<<<<< HEAD
=======

  GLuint vertexShader2 = loadShader(GL_VERTEX_SHADER, vertexShaderSource2);
  GLuint fragmentShader2 = loadShader(GL_FRAGMENT_SHADER, fragmentShaderSource2);
  programObject2 = buildProgram(vertexShader2, fragmentShader2, "vPosition", 0);
>>>>>>> f8c054953a6d727eb79ecf07e1c23d96c78a9719

  attribute_v_coord = glGetAttribLocation(programObject, "vPosition");
  attribute_v_uv = glGetAttribLocation(programObject, "vUV");

  //std::cout << attribute_v_uv << std::endl;

  // Tex
  GLint texLoc;
  texLoc = glGetUniformLocation(programObject, "BaseMap");

	//save location of uniform variables
<<<<<<< HEAD
  uniformVP = glGetUniformLocation(programObject, "ViewProj");
  uniformML = glGetUniformLocation(programObject, "ModelLocal");
=======
  uniformDiffuse = 0;//glGetUniformLocation(programObject, "diffuse");
  uniformDiffuse2 = 0;//glGetUniformLocation(programObject2, "diffuse");
  uniformVP = glGetUniformLocation(programObject, "ViewProj");
  uniformML = glGetUniformLocation(programObject, "ModelLocal");
  uniformVP2 = glGetUniformLocation(programObject2, "ViewProj");
  uniformML2 = glGetUniformLocation(programObject2, "ModelLocal");
  uniformAlpha = 0;// glGetUniformLocation(programObject, "alpha");
>>>>>>> f8c054953a6d727eb79ecf07e1c23d96c78a9719
}


RenderSystem::~RenderSystem()
{


}


void RenderSystem::zoom(int i)
{
}


void RenderSystem::move(double x, double y)
{

}


void setCameraPos(float x, float y, float z)
{

}


void RenderSystem::setViewSettings(double hfov, double near, double far)
{

}



static bool s_viewSet = false;
void RenderSystem::setViewSettings(double hfov, double near, double far)
{
<<<<<<< HEAD
  //glClearColor(0.f, 92.f / 255.f, 159.f / 255.f, 1.f); // "Skydiver"
  //glClearColor(142.0/255.0, 47.0/255.0, 21.0/255.0, 1.0); // "Autumn"
  //glViewport(0, 0, m_window.width, m_window.height);
  glClear( GL_COLOR_BUFFER_BIT );

  glDepthFunc(GL_LESS);

  glm::mat4 VP(1.0);
}


void RenderSystem::modePersp()
{
  glm::mat4 VP(1.0);
  VP = glm::perspective( 15.f, 640.f / 576.f, 0.1f, 10.f );

  glUseProgram(programObject);
  glUniformMatrix4fv(uniformVP, 1, GL_FALSE, &VP[0][0]);
}


void RenderSystem::modeOrtho()
{
  glm::mat4 VP(1.0);
  VP = glm::ortho( 0.f, 1.f, 1.f, 0.f, -10.f, 10.f );

  glUseProgram(programObject);
  glUniformMatrix4fv(uniformVP, 1, GL_FALSE, &VP[0][0]);
}


void RenderSystem::modeOrtho(float x, float y)
{
  glm::mat4 VP(1.0);
  VP = glm::ortho( 0.f, x, y, 0.f, -10.f, 10.f );

  glUseProgram(programObject);
  glUniformMatrix4fv(uniformVP, 1, GL_FALSE, &VP[0][0]);
}


void RenderSystem::modeOrtho(float x, float y, float w, float h)
{
  glm::mat4 VP(1.0);
  VP = glm::ortho( x, x+w, y+h, y, -10.f, 10.f );

  glUseProgram(programObject);
  glUniformMatrix4fv(uniformVP, 1, GL_FALSE, &VP[0][0]);
=======
  s_viewSet = true;
  if (hfov == 0)
  {
    float v_side = 1.f;
    Projection = glm::ortho(
      -v_side * m_window.width,
       v_side * m_window.width,
      -v_side * m_window.height,
       v_side * m_window.height,
       (float)near,
       (float)far);
  }
  else
  {
    Projection = glm::perspective(
       (float)hfov,
       (float)m_window.width / (float)m_window.height,
       (float)near,
       (float)far);
  }
}


void RenderSystem::start(const glm::vec3& from, const glm::vec3& lookAt)
{
  // glClearColor(0.f, 92.f / 255.f, 159.f / 255.f, 1.f); // "Skydiver"
  // glClear( GL_COLOR_BUFFER_BIT );

  glViewport(0, 0, m_window.width, m_window.height);

  glDepthFunc(GL_LESS);

  // Projection matrix
  if (!s_viewSet)
  {
    setViewSettings(0);
  }

  // Camera View matrix
  View = glm::lookAt(
                glm::vec3(m_cameraX, m_cameraY, 0.f) + from, // Camera in World Space
                glm::vec3(m_cameraX,  m_cameraY, 0.f) + lookAt, // looks at
                glm::vec3(0, 0, 1)  // Head is up (set to 0,-1,0 to look upside-down)
               );

  // Calculate ViewProj
  glm::mat4 VP = Projection * View;

  glUseProgram(programObject);
  glUniformMatrix4fv(uniformVP, 1, GL_FALSE, &VP[0][0]);
  // glUseProgram(programObject2);
  // glUniformMatrix4fv(uniformVP2, 1, GL_FALSE, &VP[0][0]);


  // DEBUG

  //glm::mat4 local = glm::rotate(VP, 3.14f, glm::vec3(0.f, 0.f, 1.f));
  //glUniformMatrix4fv(uniformVP, 1, GL_FALSE, &local[0][0]);
  // glm::mat4 local = glm::mat4(1.0f);
  // glUniformMatrix4fv(uniformML, 1, GL_FALSE, &local[0][0]);
  //
  // float colour0[] = { 123.f / 255.f, 179.f / 255.f,  105.f / 255.f }; // Grass Green
  // float colour1[] = { 188.f / 255.f, 188.f / 255.f,  100.f / 255.f }; // Yellow
  //
  // glUniform3fv(uniformDiffuse, 1, colour0);
  //
  // drawObjModel_square();
>>>>>>> f8c054953a6d727eb79ecf07e1c23d96c78a9719
}


void RenderSystem::end()
{
  glUseProgram(programObject);
}


void RenderSystem::setCursor(int x, int y)
{
<<<<<<< HEAD

=======
  m_cursorX = x;
  m_cursorY = y;
  return;

  // float v_side = 0.05f / m_zoom;
  // glm::mat4 Projection = glm::ortho(
  //   -v_side * m_window.width,
  //    v_side * m_window.width,
  //   -v_side * m_window.height,
  //    v_side * m_window.height,
  //    1.0f,
  //    100.0f);
  //
  // glm::mat4 View = glm::lookAt(
  //               glm::vec3(m_cameraX+30, m_cameraY+30, 40), // Camera is at (4,3,3), in World Space
  //               glm::vec3(m_cameraX+0,  m_cameraY+0, 0), // and looks at the origin
  //               glm::vec3(0, 0, 1)  // Head is up (set to 0,-1,0 to look upside-down)
  //              );

  glm::vec3 m_start;
  glm::vec3 m_end;
  glm::ivec4 viewport(0, 0, m_window.width, m_window.height);

  // window pos of mouse, Y is inverted on Windows
  glm::vec3 win((double)x, (double)(m_window.height - y), 0.0);

  // get point on the 'near' plane (third param is set to 0.0)
  m_start = glm::unProject(win, View, Projection, viewport);

  // get point on the 'far' plane (third param is set to 1.0)
  win.z = 1.0;
  m_end = glm::unProject(win, View, Projection, viewport);

  // now you can create a ray from m_start to m_end

  // Calculate some intersection point

  glm::vec3 m_dir = m_end - m_start;
  //(m_start + a * m_dir).z = 0;
  float a = m_dir.z == 0 ? 0 :
            -m_start.z / m_dir.z;
  m_cursorX = x + m_end.x;//m_start.x + a * m_dir.x;
  m_cursorY = y + m_end.x;//m_start.y + a * m_dir.y;
>>>>>>> f8c054953a6d727eb79ecf07e1c23d96c78a9719
}


bool RenderSystem::enableVertexPos(GLint program)
{
  if (program == programObject)
  {
      glEnableVertexAttribArray(attribute_v_coord);
      return true;
  }

  return false;
}


bool RenderSystem::enableVertexUV(GLint program)
{
  if (program == programObject)
  {
      glEnableVertexAttribArray(attribute_v_uv);
      return true;
  }

  return false;
}
